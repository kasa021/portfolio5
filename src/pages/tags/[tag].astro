---
import Layout from "../../layouts/Layout.astro";
import BlogPost from "../../components/BlogPost.astro";
import type { MarkdownInstance } from "astro";

export const prerender = true;

// Post 型の定義（frontmatter は title と tags を持つ）
interface Post {
    url: string;
    frontmatter: {
        title: string;
        tags: string[];
    };
}

type TagPath = {
    params: { tag: string };
    props: { posts: Post[] };
};

export async function getStaticPaths(): Promise<TagPath[]> {
    const allBlogs: MarkdownInstance<Record<string, any>>[] = await Astro.glob(
        "/src/pages/blogs/*.md",
    );
    console.log(allBlogs);

    const uniqueTags: string[] = [
        ...new Set(allBlogs.map((blog) => blog.frontmatter.tags).flat()),
    ];
    console.log(uniqueTags);

    return uniqueTags.map((tag: string) => {
        const filteredPosts = allBlogs.filter((blog) =>
            blog.frontmatter.tags.includes(tag),
        );
        const typedPosts: Post[] = filteredPosts.map((post) => ({
            url: post.url ?? "",
            frontmatter: {
                title: post.frontmatter.title,
                tags: post.frontmatter.tags,
            },
        }));
        console.log(typedPosts);
        return { params: { tag }, props: { posts: typedPosts } };
    });
}

// Astro.params / Astro.props
const tag: string = Astro.params.tag || "";
const posts: Post[] =
    (Astro.props as { posts?: Post[] } | undefined)?.posts ?? [];
---

<Layout title={tag}>
    <p>{tag} のタグが付いた記事</p>

    {
        posts.length === 0 ? (
            <p>このタグの記事はまだありません。</p>
        ) : (
            <ul>
                {posts.map((post) => (
                    <BlogPost url={post.url} title={post.frontmatter.title} />
                ))}
            </ul>
        )
    }
</Layout>
